node n1 {
    type router
    model PC
    network-config {
	hostname Lola
	!
	interface eth0
	 ipv6 address 2001:db8:1::20/64
	 ip address 10.0.2.20/24
	!
    }
    canvas c1
    iconcoords {565.0 86.0}
    labelcoords {565.0 66.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('O_Cliente.py', 'livroGeo', 'teste1', 'Diamante', )
	meta=Clente .
	}
    }
    custom-config {
	custom-config-id service:UserDefined:Diamante
	custom-command Diamante
	config {
	Um pouco sobre o Diamente.
	
	O texto a seguir foi estraido da wikipedia como metodo de teste para da atividade.
	
	O diamante é um cristal sob uma forma alotrópica do carbono, 
	de fórmula química
	C. É a forma triangular estável do carbono em pressões acima de 6 GPa (60 kbar).
	Comercializados como pedras preciosas, os diamantes possuem um alto valor 
	agregado.
	 Normalmente, o diamante cristaliza com estrutura cúbica e pode ser sintetizado industrialmente. 
	Outra forma de cristalização do diamante é a hexagonal, menos comum na 
	natureza e com dureza menor (9,5 na escala de Mohs). 
	
	O diamante é o mais duro material de ocorrência natural que se conhece. 
	Sua dureza é superada pelos também compostos (sintéticos) de carbono,
	grafeno e carbono acetilênico linear (conhecido também como carbino).
	[1] Isto significa que não pode ser riscado por nenhum outro mineral
	ou substância,
	exceto o próprio diamante, funcionando como um importante material abrasivo. 
	No entanto, é muito frágil, e isso deve-se à clivagem octaédrica perfeita. 
	Estas duas características fizeram com que o diamante não fosse talhado durante muitos anos. 
	A maior jazida do mundo, revelada pela Rússia ao mundo em 2012, 
	porém de conhecimento do Kremlin desde 1970, 
	tem capacidade para suprir diamantes, 
	mesmo para uso industrial, pelos próximos 3000 anos.
	
	A jazida conta com trilhões de quilates, e conta com 10 vezes mais diamantes do
	 que todas as jazidas conhecidas existentes no mundo hoje, juntas. 
	Ela situa-se numa cratera com extensão de 100 km entre a região de Krasnoiarsk e 
	da República de Sakha na Sibéria, Rússia. 
	Tal cratera teve origem há 35 milhões de anos, com a queda de um asteroide, e 
	seus diamantes são duas vezes mais resistentes, duros, do que os encontrados em outros lugares. 
	A sua origem é decorrente da pressão e do calor gerado no impacto. 
	Tal durabilidade é do interesse de certos setores industriais, 
	pois é ótimo e de extrema utilidade para confecção de equipamentos das 
	indústrias eletrônica e ótica, assim como em equipamentos para perfuração do 
	solo.
	
	Referencia:
	WikiPedia
	}
    }
    custom-config {
	custom-config-id service:UserDefined:teste1
	custom-command teste1
	config {
	Teste numero 1:
	
	sempre estara dentro da maquina os arquivos e serao mostrados ao usuario quando rodar o arquivo
	
	
	
	
	
	
	sem mais informações.
	}
    }
    custom-config {
	custom-config-id service:UserDefined:livroGeo
	custom-command livroGeo
	config {
	Livro Geografia aplicada a historia 1ed.
	
	
	Jorge Jose da Silva Lopes
	
	
	a pedra é dura mas a agua tanto bate até que fura,
	e assim foi feito o Grand Canion.
	
	Nunca confie no que le como sempre sendo verdade,
	pois o proprio escritor pode estar se baseando em
	fatos erroneos
	
	Referencias:
	Memorias
	
	Jorge Jose da Silva Lopes, todos os direitos reservados
	junho,2021.
	}
    }
    custom-config {
	custom-config-id service:UserDefined:O_Cliente.py
	custom-command O_Cliente.py
	config {
	from socket import *
	import os
	import pickle
	
	nomeServidor = '200.17.124.13'
	
	portaServidor = 2303
	
	socketCliente = socket (AF_INET, SOCK_STREAM)
	
	socketCliente.connect ((nomeServidor, portaServidor))
	
	socketCliente.send ("Lola")
	
	atv = raw_input ('Write d for download or s to send a file to the server: ')
	socketCliente.send(atv)
	
	if atv == 'd':
	    resp = pickle.loads(socketCliente.recv(1024))
	    print resp
	    file = raw_input('write the file`s name to download: ')
	    socketCliente.send(file)
	    f = open(file,'w')
	    l = socketCliente.recv(1024)
	    while l:
		f.write(l)
		l = socketCliente.recv(1024)
		    
	    f.close()
	elif atv == 's':
	    cwd = raw_input('Write the directory of the file to send, send nothing to root:')
	    if cwd != '':
		try:
		  os.chdir(cwd)
		except:
		  pass
	    print list(filter(os.path.isfile,os.listdir(os.getcwd())))
	    file = raw_input ('Write the file`s name to be sent to the server: ')
	
	    f = open(file,"rb")
	
	    l = f.read(1024)
	
	    while l:
	    	socketCliente.send(l)
	    	l = f.read(1024)
	    f.close()
	
	socketCliente.close ()
	
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n6}
}

node n2 {
    type router
    model PC
    network-config {
	hostname Bob
	!
	interface eth0
	 ipv6 address 2001:db8:1::21/64
	 ip address 10.0.2.21/24
	!
    }
    canvas c1
    iconcoords {789.0 197.0}
    labelcoords {789.0 175.0}
    interface-peer {eth0 n6}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('O_Cliente.py', 'livroGeo', 'test1', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:test1
	custom-command test1
	config {
	Test File 1 : BOB
	
	simulating a pdf file being sent to the server
	
	that could be a article from a teacher or student
	
	or a discipline activity sent to sigaa
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined:livroGeo
	custom-command livroGeo
	config {
	Livro Geografia aplicada a historia 1ed.
	
	
	Jorge Jose da Silva Lopes
	
	
	a pedra é dura mas a agua tanto bate até que fura,
	e assim foi feito o Grand Canion.
	
	Nunca confie no que le como sempre sendo verdade,
	pois o proprio escritor pode estar se baseando em
	fatos erroneos
	
	Referencias:
	Memorias
	
	Jorge Jose da Silva Lopes, todos os direitos reservados
	junho,2021
	}
    }
    custom-config {
	custom-config-id service:UserDefined:O_Cliente.py
	custom-command O_Cliente.py
	config {
	from socket import *
	import os
	import pickle
	
	nomeServidor = '200.17.124.13'
	
	portaServidor = 2303
	
	socketCliente = socket (AF_INET, SOCK_STREAM)
	
	socketCliente.connect ((nomeServidor, portaServidor))
	
	
	socketCliente.send ("Bob")
	atv = raw_input ('Write d for download or s to send a file to the server: ')
	socketCliente.send(atv)
	
	if atv == 'd':
	    resp = pickle.loads(socketCliente.recv(1024))
	    print resp
	    file = raw_input('write the file`s name to download: ')
	    socketCliente.send(file)
	    f = open(file,'w')
	    l = socketCliente.recv(1024)
	    while l:
		f.write(l)
		l = socketCliente.recv(1024)
		    
	    f.close()
	elif atv == 's':
	    cwd = raw_input('Write the directory of the file to send, send nothing to root:')
	    if cwd != '':
		try:
		  os.chdir(cwd)
		except:
		  pass
	    print list(filter(os.path.isfile,os.listdir(os.getcwd())))
	    file = raw_input ('Write the file`s name to be sent to the server: ')
	
	    f = open(file,"rb")
	
	    l = f.read(1024)
	
	    while l:
	    	socketCliente.send(l)
	    	l = f.read(1024)
	    f.close()
	
	socketCliente.close ()
	}
    }
    services {DefaultRoute UserDefined}
}

node n3 {
    type router
    model host
    network-config {
	hostname DGE
	!
	interface eth0
	 ipv6 address 2001:db8:0::10/64
	 ip address 200.17.124.13/24
	!
    }
    canvas c1
    iconcoords {146.0 126.0}
    labelcoords {149.0 104.0}
    interface-peer {eth0 n4}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('O_Servidor.py', )
	cmdup=('python O_Servidor.py', )
	meta=Servidor .
	}
    }
    custom-config {
	custom-config-id service:UserDefined:O_Servidor.py
	custom-command O_Servidor.py
	config {
	from socket import *
	import os
	import pickle
	
	portaServidor = 2303
	
	socketServidor = socket (AF_INET, SOCK_STREAM)
	
	socketServidor.bind (('200.17.124.13', portaServidor))
	
	socketServidor.listen (10)
	
	while 1 :
	
	    socketConexao, endereco = socketServidor.accept ()
	    nome = socketConexao.recv(1024)
	    ord = socketConexao.recv(1024)
	    if ord == 'd':
		files = list(filter(os.path.isfile,os.listdir(os.getcwd())))
	
		data = pickle.dumps(files)
	    	socketConexao.send(data)
	    	file = socketConexao.recv(1024)
	    	f = open(file,"rb")
	      	l = f.read(1024)
	    	while l:
	    	    socketConexao.send(l)
	    	    l = f.read(1024)
	
	    elif ord == 's':
	    	i = 1
	    	while 1:
		    try:
		    	f = open('file_'+nome+'_'+str(i),'r')
		    	i += 1
		    except:
		    	break
	    	f = open('file_'+nome+'_'+str(i),'w')
	
	    	while 1:
		    l = socketConexao.recv(1024)
		    while l:
		    	f.write(l)
		    	l = socketConexao.recv(1024)
		    break
	    	f.close()
	
	    socketConexao.close ()
	
	socketServidor.close()
	}
    }
    services {DefaultRoute SSH UserDefined}
}

node n4 {
    type router
    model router
    network-config {
	hostname STI
	!
	interface eth1
	 ipv6 address 2001:db8:1::1/64
	 ip address 10.0.2.1/24
	!
	interface eth0
	 ipv6 address 2001:db8:0::1/64
	 ip address 200.17.124.1/24
	!
    }
    canvas c1
    iconcoords {382.0 206.0}
    labelcoords {382.0 238.0}
    interface-peer {eth0 n3}
    interface-peer {eth1 n6}
}

node n6 {
    type lanswitch
    network-config {
	hostname lab10
	!
    }
    canvas c1
    iconcoords {617.0 261.0}
    labelcoords {617.0 288.0}
    interface-peer {e0 n4}
    interface-peer {e1 n1}
    interface-peer {e2 n2}
}

link l1 {
    nodes {n3 n4}
    bandwidth 0
}

link l2 {
    nodes {n4 n6}
    bandwidth 0
}

link l3 {
    nodes {n6 n1}
    bandwidth 0
}

link l4 {
    nodes {n6 n2}
    bandwidth 0
}

annotation a1 {
    iconcoords {119 55 431 258}
    type rectangle
    label {CECH}
    labelcolor #000000
    fontfamily {Arial}
    fontsize {12}
    color #7ec6fb
    width 0
    border #000000
    rad 27
    canvas c1
}

annotation a2 {
    iconcoords {472 56 822 254}
    type rectangle
    label {Intranet}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #d8c03c
    width 0
    border #000000
    rad 25
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

